package com.bzu.smartvax.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HealthWorkerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthWorkerAllPropertiesEquals(HealthWorker expected, HealthWorker actual) {
        assertHealthWorkerAutoGeneratedPropertiesEquals(expected, actual);
        assertHealthWorkerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthWorkerAllUpdatablePropertiesEquals(HealthWorker expected, HealthWorker actual) {
        assertHealthWorkerUpdatableFieldsEquals(expected, actual);
        assertHealthWorkerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthWorkerAutoGeneratedPropertiesEquals(HealthWorker expected, HealthWorker actual) {
        assertThat(actual)
            .as("Verify HealthWorker auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthWorkerUpdatableFieldsEquals(HealthWorker expected, HealthWorker actual) {
        assertThat(actual)
            .as("Verify HealthWorker relevant properties")
            .satisfies(a -> assertThat(a.getUsername()).as("check username").isEqualTo(expected.getUsername()))
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getAge()).as("check age").isEqualTo(expected.getAge()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getRole()).as("check role").isEqualTo(expected.getRole()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHealthWorkerUpdatableRelationshipsEquals(HealthWorker expected, HealthWorker actual) {
        // empty method
    }
}
