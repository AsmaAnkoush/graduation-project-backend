package com.bzu.smartvax.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ScheduleVaccinationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleVaccinationAllPropertiesEquals(ScheduleVaccination expected, ScheduleVaccination actual) {
        assertScheduleVaccinationAutoGeneratedPropertiesEquals(expected, actual);
        assertScheduleVaccinationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleVaccinationAllUpdatablePropertiesEquals(ScheduleVaccination expected, ScheduleVaccination actual) {
        assertScheduleVaccinationUpdatableFieldsEquals(expected, actual);
        assertScheduleVaccinationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleVaccinationAutoGeneratedPropertiesEquals(ScheduleVaccination expected, ScheduleVaccination actual) {
        assertThat(actual)
            .as("Verify ScheduleVaccination auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleVaccinationUpdatableFieldsEquals(ScheduleVaccination expected, ScheduleVaccination actual) {
        assertThat(actual)
            .as("Verify ScheduleVaccination relevant properties")
            .satisfies(a -> assertThat(a.getScheduledDate()).as("check scheduledDate").isEqualTo(expected.getScheduledDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleVaccinationUpdatableRelationshipsEquals(ScheduleVaccination expected, ScheduleVaccination actual) {
        assertThat(actual)
            .as("Verify ScheduleVaccination relationships")
            .satisfies(a -> assertThat(a.getChild()).as("check child").isEqualTo(expected.getChild()))
            .satisfies(a -> assertThat(a.getVaccination()).as("check vaccination").isEqualTo(expected.getVaccination()));
    }
}
