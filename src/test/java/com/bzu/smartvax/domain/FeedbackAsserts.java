package com.bzu.smartvax.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FeedbackAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedbackAllPropertiesEquals(Feedback expected, Feedback actual) {
        assertFeedbackAutoGeneratedPropertiesEquals(expected, actual);
        assertFeedbackAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedbackAllUpdatablePropertiesEquals(Feedback expected, Feedback actual) {
        assertFeedbackUpdatableFieldsEquals(expected, actual);
        assertFeedbackUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedbackAutoGeneratedPropertiesEquals(Feedback expected, Feedback actual) {
        assertThat(actual)
            .as("Verify Feedback auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedbackUpdatableFieldsEquals(Feedback expected, Feedback actual) {
        assertThat(actual)
            .as("Verify Feedback relevant properties")
            .satisfies(a -> assertThat(a.getMessageText()).as("check messageText").isEqualTo(expected.getMessageText()))
            .satisfies(a -> assertThat(a.getSideEffects()).as("check sideEffects").isEqualTo(expected.getSideEffects()))
            .satisfies(a -> assertThat(a.getTreatment()).as("check treatment").isEqualTo(expected.getTreatment()))
            .satisfies(a -> assertThat(a.getDateSubmitted()).as("check dateSubmitted").isEqualTo(expected.getDateSubmitted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedbackUpdatableRelationshipsEquals(Feedback expected, Feedback actual) {
        assertThat(actual)
            .as("Verify Feedback relationships")
            .satisfies(a -> assertThat(a.getParent()).as("check parent").isEqualTo(expected.getParent()))
            .satisfies(a -> assertThat(a.getVaccination()).as("check vaccination").isEqualTo(expected.getVaccination()));
    }
}
