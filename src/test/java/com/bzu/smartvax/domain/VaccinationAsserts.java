package com.bzu.smartvax.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VaccinationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationAllPropertiesEquals(Vaccination expected, Vaccination actual) {
        assertVaccinationAutoGeneratedPropertiesEquals(expected, actual);
        assertVaccinationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationAllUpdatablePropertiesEquals(Vaccination expected, Vaccination actual) {
        assertVaccinationUpdatableFieldsEquals(expected, actual);
        assertVaccinationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationAutoGeneratedPropertiesEquals(Vaccination expected, Vaccination actual) {
        assertThat(actual)
            .as("Verify Vaccination auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationUpdatableFieldsEquals(Vaccination expected, Vaccination actual) {
        assertThat(actual)
            .as("Verify Vaccination relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getSideEffects()).as("check sideEffects").isEqualTo(expected.getSideEffects()))
            .satisfies(a -> assertThat(a.getTargetAge()).as("check targetAge").isEqualTo(expected.getTargetAge()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getTreatment()).as("check treatment").isEqualTo(expected.getTreatment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationUpdatableRelationshipsEquals(Vaccination expected, Vaccination actual) {
        // empty method
    }
}
