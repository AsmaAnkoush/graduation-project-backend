package com.bzu.smartvax.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VaccinationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationAllPropertiesEquals(Vaccination expected, Vaccination actual) {
        assertVaccinationAutoGeneratedPropertiesEquals(expected, actual);
        assertVaccinationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationAllUpdatablePropertiesEquals(Vaccination expected, Vaccination actual) {
        assertVaccinationUpdatableFieldsEquals(expected, actual);
        assertVaccinationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationAutoGeneratedPropertiesEquals(Vaccination expected, Vaccination actual) {
        assertThat(actual)
            .as("Verify Vaccination auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationUpdatableFieldsEquals(Vaccination expected, Vaccination actual) {
        assertThat(actual)
            .as("Verify Vaccination relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDose()).as("check dose").isEqualTo(expected.getDose()))
            .satisfies(a -> assertThat(a.getTreatment()).as("check treatment").isEqualTo(expected.getTreatment()))
            .satisfies(a ->
                assertThat(a.getRouteOfAdministration()).as("check routeOfAdministration").isEqualTo(expected.getRouteOfAdministration())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVaccinationUpdatableRelationshipsEquals(Vaccination expected, Vaccination actual) {
        assertThat(actual)
            .as("Verify Vaccination relationships")
            .satisfies(a -> assertThat(a.getVaccineType()).as("check vaccineType").isEqualTo(expected.getVaccineType()))
            .satisfies(a -> assertThat(a.getGroup()).as("check group").isEqualTo(expected.getGroup()));
    }
}
