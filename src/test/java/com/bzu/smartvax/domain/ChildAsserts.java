package com.bzu.smartvax.domain;

import static com.bzu.smartvax.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ChildAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildAllPropertiesEquals(Child expected, Child actual) {
        assertChildAutoGeneratedPropertiesEquals(expected, actual);
        assertChildAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildAllUpdatablePropertiesEquals(Child expected, Child actual) {
        assertChildUpdatableFieldsEquals(expected, actual);
        assertChildUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildAutoGeneratedPropertiesEquals(Child expected, Child actual) {
        assertThat(actual)
            .as("Verify Child auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildUpdatableFieldsEquals(Child expected, Child actual) {
        assertThat(actual)
            .as("Verify Child relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDob()).as("check dob").isEqualTo(expected.getDob()))
            .satisfies(a ->
                assertThat(a.getWeight()).as("check weight").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getWeight())
            )
            .satisfies(a ->
                assertThat(a.getHeight()).as("check height").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getHeight())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildUpdatableRelationshipsEquals(Child expected, Child actual) {
        assertThat(actual)
            .as("Verify Child relationships")
            .satisfies(a -> assertThat(a.getHealthRecord()).as("check healthRecord").isEqualTo(expected.getHealthRecord()))
            .satisfies(a -> assertThat(a.getParent()).as("check parent").isEqualTo(expected.getParent()));
    }
}
