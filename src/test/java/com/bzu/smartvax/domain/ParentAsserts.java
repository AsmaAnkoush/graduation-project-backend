package com.bzu.smartvax.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParentAllPropertiesEquals(Parent expected, Parent actual) {
        assertParentAutoGeneratedPropertiesEquals(expected, actual);
        assertParentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParentAllUpdatablePropertiesEquals(Parent expected, Parent actual) {
        assertParentUpdatableFieldsEquals(expected, actual);
        assertParentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParentAutoGeneratedPropertiesEquals(Parent expected, Parent actual) {
        assertThat(actual)
            .as("Verify Parent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParentUpdatableFieldsEquals(Parent expected, Parent actual) {
        assertThat(actual)
            .as("Verify Parent relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getDob()).as("check dob").isEqualTo(expected.getDob()))
            .satisfies(a -> assertThat(a.getRole()).as("check role").isEqualTo(expected.getRole()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParentUpdatableRelationshipsEquals(Parent expected, Parent actual) {
        // empty method
    }
}
